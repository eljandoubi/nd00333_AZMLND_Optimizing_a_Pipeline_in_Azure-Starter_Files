{'estimators': [('30',
   Pipeline(memory=None,
            steps=[('standardscalerwrapper',
                    StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                   ('xgboostclassifier',
                    XGBoostClassifier(booster='gbtree', colsample_bylevel=0.6, colsample_bytree=1, eta=0.001, gamma=0, max_depth=6, max_leaves=15, n_estimators=800, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=2.5, subsample=1, tree_method='auto'))],
            verbose=False)),
  ('24',
   Pipeline(memory=None,
            steps=[('standardscalerwrapper',
                    StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                   ('xgboostclassifier',
                    XGBoostClassifier(booster='gbtree', colsample_bytree=1, eta=0.05, gamma=0, max_depth=6, max_leaves=0, n_estimators=200, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0.625, reg_lambda=0.8333333333333334, subsample=0.8, tree_method='auto'))],
            verbose=False)),
  ('21',
   Pipeline(memory=None,
            steps=[('standardscalerwrapper',
                    StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                   ('xgboostclassifier',
                    XGBoostClassifier(booster='gbtree', colsample_bytree=0.5, eta=0.2, gamma=0, max_depth=7, max_leaves=7, n_estimators=25, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=0.20833333333333334, subsample=1, tree_method='auto'))],
            verbose=False)),
  ('11',
   Pipeline(memory=None,
            steps=[('standardscalerwrapper',
                    StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                   ('xgboostclassifier',
                    XGBoostClassifier(booster='gbtree', colsample_bytree=0.6, eta=0.3, gamma=0, max_depth=6, max_leaves=0, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0.3125, reg_lambda=2.3958333333333335, subsample=1, tree_method='auto'))],
            verbose=False)),
  ('0',
   Pipeline(memory=None,
            steps=[('maxabsscaler', MaxAbsScaler(copy=True)),
                   ('lightgbmclassifier',
                    LightGBMClassifier(min_data_in_leaf=20, n_jobs=1, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None))],
            verbose=False)),
  ('13',
   Pipeline(memory=None,
            steps=[('maxabsscaler', MaxAbsScaler(copy=True)),
                   ('sgdclassifierwrapper',
                    SGDClassifierWrapper(alpha=7.5510448979591835, class_weight='balanced', eta0=0.001, fit_intercept=True, l1_ratio=0.42857142857142855, learning_rate='constant', loss='modified_huber', max_iter=1000, n_jobs=1, penalty='none', power_t=0.7777777777777777, random_state=None, tol=0.0001))],
            verbose=False)),
  ('3',
   Pipeline(memory=None,
            steps=[('sparsenormalizer', Normalizer(copy=True, norm='l2')),
                   ('xgboostclassifier',
                    XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.01, gamma=0.01, max_depth=7, max_leaves=31, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=2.1875, reg_lambda=1.0416666666666667, subsample=1, tree_method='auto'))],
            verbose=False)),
  ('22',
   Pipeline(memory=None,
            steps=[('standardscalerwrapper',
                    StandardScalerWrapper(copy=True, with_mean=False, with_std=True)),
                   ('lightgbmclassifier',
                    LightGBMClassifier(boosting_type='gbdt', colsample_bytree=0.4955555555555555, learning_rate=0.05789894736842106, max_bin=210, max_depth=5, min_child_weight=0, min_data_in_leaf=0.07931241379310346, min_split_gain=0.3684210526315789, n_estimators=600, n_jobs=1, num_leaves=137, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None, reg_alpha=0.5789473684210527, reg_lambda=0.42105263157894735, subsample=0.05))],
            verbose=False)),
  ('12',
   Pipeline(memory=None,
            steps=[('maxabsscaler', MaxAbsScaler(copy=True)),
                   ('logisticregression',
                    LogisticRegression(C=719.6856730011514, class_weight=None,
                                       dual=False, fit_intercept=True,
                                       intercept_scaling=1, l1_ratio=None,
                                       max_iter=100, multi_class='multinomial',
                                       n_jobs=1, penalty='l2', random_state=None,
                                       solver='lbfgs', tol=0.0001, verbose=0,
                                       warm_start=False))],
            verbose=False))],
 'voting': 'soft',
 'weights': [0.35714285714285715,
  0.07142857142857142,
  0.07142857142857142,
  0.14285714285714285,
  0.07142857142857142,
  0.07142857142857142,
  0.07142857142857142,
  0.07142857142857142,
  0.07142857142857142],
 'n_jobs': None,
 'flatten_transform': None,
 'estimators_': [Pipeline(memory=None,
           steps=[('standardscalerwrapper',
                   StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                  ('xgboostclassifier',
                   XGBoostClassifier(booster='gbtree', colsample_bylevel=0.6, colsample_bytree=1, eta=0.001, gamma=0, max_depth=6, max_leaves=15, n_estimators=800, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=2.5, subsample=1, tree_method='auto'))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('standardscalerwrapper',
                   StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                  ('xgboostclassifier',
                   XGBoostClassifier(booster='gbtree', colsample_bytree=1, eta=0.05, gamma=0, max_depth=6, max_leaves=0, n_estimators=200, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0.625, reg_lambda=0.8333333333333334, subsample=0.8, tree_method='auto'))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('standardscalerwrapper',
                   StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                  ('xgboostclassifier',
                   XGBoostClassifier(booster='gbtree', colsample_bytree=0.5, eta=0.2, gamma=0, max_depth=7, max_leaves=7, n_estimators=25, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0, reg_lambda=0.20833333333333334, subsample=1, tree_method='auto'))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('standardscalerwrapper',
                   StandardScalerWrapper(copy=True, with_mean=False, with_std=False)),
                  ('xgboostclassifier',
                   XGBoostClassifier(booster='gbtree', colsample_bytree=0.6, eta=0.3, gamma=0, max_depth=6, max_leaves=0, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=0.3125, reg_lambda=2.3958333333333335, subsample=1, tree_method='auto'))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('maxabsscaler', MaxAbsScaler(copy=True)),
                  ('lightgbmclassifier',
                   LightGBMClassifier(min_data_in_leaf=20, n_jobs=1, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('maxabsscaler', MaxAbsScaler(copy=True)),
                  ('sgdclassifierwrapper',
                   SGDClassifierWrapper(alpha=7.5510448979591835, class_weight='balanced', eta0=0.001, fit_intercept=True, l1_ratio=0.42857142857142855, learning_rate='constant', loss='modified_huber', max_iter=1000, n_jobs=1, penalty='none', power_t=0.7777777777777777, random_state=None, tol=0.0001))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('sparsenormalizer', Normalizer(copy=True, norm='l2')),
                  ('xgboostclassifier',
                   XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.01, gamma=0.01, max_depth=7, max_leaves=31, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=0, reg_alpha=2.1875, reg_lambda=1.0416666666666667, subsample=1, tree_method='auto'))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('standardscalerwrapper',
                   StandardScalerWrapper(copy=True, with_mean=False, with_std=True)),
                  ('lightgbmclassifier',
                   LightGBMClassifier(boosting_type='gbdt', colsample_bytree=0.4955555555555555, learning_rate=0.05789894736842106, max_bin=210, max_depth=5, min_child_weight=0, min_data_in_leaf=0.07931241379310346, min_split_gain=0.3684210526315789, n_estimators=600, n_jobs=1, num_leaves=137, problem_info=ProblemInfo(gpu_training_param_dict={'processing_unit_type': 'cpu'}), random_state=None, reg_alpha=0.5789473684210527, reg_lambda=0.42105263157894735, subsample=0.05))],
           verbose=False),
  Pipeline(memory=None,
           steps=[('maxabsscaler', MaxAbsScaler(copy=True)),
                  ('logisticregression',
                   LogisticRegression(C=719.6856730011514, class_weight=None,
                                      dual=False, fit_intercept=True,
                                      intercept_scaling=1, l1_ratio=None,
                                      max_iter=100, multi_class='multinomial',
                                      n_jobs=1, penalty='l2', random_state=None,
                                      solver='lbfgs', tol=0.0001, verbose=0,
                                      warm_start=False))],
           verbose=False)],
 '_labels': array([0, 1]),
 'le_': LabelEncoder(),
 'classes_': array([0, 1])}
